[project]
name = "nipe_py"
authors = [
  { name = "nipe_py", email = "saikickkarma@protonmail.com" }
]
description = "An engine to make Tor Network your default gateway."
readme = "README.md"
dynamic = ["version"]
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = ">=3.9"
dependencies = [
  "requests",
  "rich",
  "click"
]

[project.urls]
Documentation = "https://avik_saikat.github.io/nipe_py/"
Source = "https://github.com/avik_saikat/nipe_py"

# mypy
[tool.mypy]
exclude = ["build/", "dist/", "docs/", "tests/*"]
check_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "ISC001"
]

[tool.pytest.ini_options]
addopts = "--cov=nipe_py/ --cov-report=term-missing"


[project.scripts]
nipe = "nipe_py.main:cli"


[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = "regex_commit"
commit_extra_args = ["-e"]
path = "src/nipe_py/__init__.py"

[tool.hatch.envs.default]
python = "3.9"
dependencies = [
    "mypy",
    "ruff",
    "pytest",
    "pytest-cov",
    "mkdocs-material",
    "mkdocstrings[python]",
    
]

[tool.hatch.envs.default.scripts]
test = "pytest"
test-cov-xml = "pytest --cov-report=xml"
lint = [
  "ruff format .",
  "ruff --fix .",
  "mypy src/nipe_py/",
]
lint-check = [
  "ruff format --check .",
  "ruff .",
  "mypy src/nipe_py/",
]
docs-serve = "mkdocs serve"
docs-build = "mkdocs build"

[build-system]
requires = ["hatchling", "hatch-regex-commit"]
build-backend = "hatchling.build"


